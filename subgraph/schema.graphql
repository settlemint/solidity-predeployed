"""
Represents an account in the system, which can be either a user or a contract
"""
type Account @entity {
	"Unique identifier for the account, typically the Ethereum address"
	id: Bytes!
	"Reference to the ERC20Contract if this account is an ERC20 token contract"
	asERC20: ERC20Contract
	"List of ERC20 token balances associated with this account"
	ERC20balances: [ERC20Balance!]! @derivedFrom(field: "account")
	"ERC20 token approvals where this account is the owner"
	ERC20approvalsOwner: [ERC20Approval!]! @derivedFrom(field: "owner")
	"ERC20 token approvals where this account is the spender"
	ERC20approvalsSpender: [ERC20Approval!]! @derivedFrom(field: "spender")
	"ERC20 token transfers where this account is the sender"
	ERC20transferFromEvent: [ERC20Transfer!]! @derivedFrom(field: "from")
	"ERC20 token transfers where this account is the recipient"
	ERC20transferToEvent: [ERC20Transfer!]! @derivedFrom(field: "to")
	"All events emitted by this account"
	events: [Event!]! @derivedFrom(field: "emitter")
}

"""
Represents an ERC20 token contract
"""
type ERC20Contract @entity {
	"Contract address of the ERC20 token"
	id: Bytes!
	"Reference to the Account entity representing this contract"
	asAccount: Account!
	"Name of the ERC20 token"
	name: String
	"Symbol of the ERC20 token"
	symbol: String
	"Number of decimal places for token amounts"
	decimals: Int!
	"Additional data associated with the token"
	extraData: String
	"Current total supply of the token"
	totalSupply: BigDecimal!
	"Current total supply of the token"
	totalSupplyExact: BigInt!
	"List of all balances for this token"
	balances: [ERC20Balance!]! @derivedFrom(field: "contract")
	"List of all approvals for this token"
	approvals: [ERC20Approval!]! @derivedFrom(field: "contract")
	"List of all transfers for this token"
	transfers: [ERC20Transfer!]! @derivedFrom(field: "contract")
}

"""
Represents the balance of an ERC20 token for a specific account
"""
type ERC20Balance @entity {
	"Unique identifier for the balance (typically contract address + account address)"
	id: ID!
	"The ERC20 token contract this balance is for"
	contract: ERC20Contract!
	"The account holding this balance"
	account: Account
	"The balance amount in decimal form"
	value: BigDecimal!
	"The exact balance amount as a BigInt"
	valueExact: BigInt!
	"Transfers where this balance is the source"
	transferFromEvent: [ERC20Transfer!]! @derivedFrom(field: "fromBalance")
	"Transfers where this balance is the destination"
	transferToEvent: [ERC20Transfer!]! @derivedFrom(field: "toBalance")
}

"""
Represents an approval for an ERC20 token
"""
type ERC20Approval @entity {
	"Unique identifier for the approval"
	id: ID!
	"The ERC20 token contract this approval is for"
	contract: ERC20Contract!
	"The account that granted the approval"
	owner: Account!
	"The account that received the approval to spend"
	spender: Account!
	"The approved amount in decimal form"
	value: BigDecimal!
	"The exact approved amount as a BigInt"
	valueExact: BigInt!
}

"""
Represents a transfer of an ERC20 token
"""
type ERC20Transfer implements Event @entity(immutable: true) {
	"Unique identifier for the transfer event"
	id: ID!
	"The account that emitted this transfer event"
	emitter: Account!
	"The transaction in which this transfer occurred"
	transaction: Transaction!
	"The timestamp of the transfer"
	timestamp: BigInt!
	"The ERC20 token contract involved in the transfer"
	contract: ERC20Contract!
	"The sender's account"
	from: Account
	"The sender's balance before the transfer"
	fromBalance: ERC20Balance
	"The recipient's account"
	to: Account
	"The recipient's balance after the transfer"
	toBalance: ERC20Balance
	"The transferred amount in decimal form"
	value: BigDecimal!
	"The exact transferred amount as a BigInt"
	valueExact: BigInt!
}

"""
Represents a generic event interface
"""
interface Event {
	"Unique identifier for the event"
	id: ID!
	"The transaction in which this event occurred"
	transaction: Transaction!
	"The account that emitted this event"
	emitter: Account!
	"The timestamp of the event"
	timestamp: BigInt!
}

"""
Represents a transaction on the blockchain
"""
type Transaction @entity(immutable: true) {
	"Transaction hash"
	id: ID!
	"Timestamp of the transaction"
	timestamp: BigInt!
	"Block number in which the transaction was included"
	blockNumber: BigInt!
	"List of events emitted in this transaction"
	events: [Event!]! @derivedFrom(field: "transaction")
}

"""
Represents the volume of a token over time
"""
type TokenVolume @entity(timeseries: true) {
	"Unique identifier for the TokenVolume"
	id: Int8!
	"The timestamp of the volume measurement"
	timestamp: Timestamp!
	"The Token this volume is for"
	token: ERC20Contract!
	"The number of transfers in this time period"
	transferCount: Int!
	"The volume of the token transferred"
	volume: BigInt!
}

"""
Represents aggregated statistics for token volume
"""
type TokenVolumeStats @aggregation(intervals: ["hour", "day"], source: "TokenVolume") {
	"Unique identifier for the TokenVolumeStats"
	id: Int8!
	"The timestamp of the aggregation"
	timestamp: Timestamp!
	"The token this aggregation is for"
	token: ERC20Contract!
	"The total number of transfers in the aggregation period"
	totalTransfers: Int! @aggregate(fn: "sum", arg: "transferCount")
	"The total volume for the aggregation period"
	totalVolume: BigInt! @aggregate(fn: "sum", arg: "volume")
}
