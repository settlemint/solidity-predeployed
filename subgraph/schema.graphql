"""
Represents an Ethereum account
"""
type Account @entity {
	"The Ethereum address of the account"
	id: Bytes!
	"The Token associated with this account, if it represents a token contract"
	asToken: Token
	"Events emitted by this account"
	events: [Event!]! @derivedFrom(field: "emitter")
	"Timestamp of the last transaction involving this account"
	lastTransactionTimestamp: BigInt
	"Native currency balance in decimal format"
	nativeValue: BigDecimal!
	"Native currency balance as an exact BigInt"
	nativeValueExact: BigInt!
	"Token approvals where this account is the owner"
	tokenApprovalsOwner: [TokenApproval!]! @derivedFrom(field: "owner")
	"Token approvals where this account is the spender"
	tokenApprovalsSpender: [TokenApproval!]! @derivedFrom(field: "spender")
	"Token balances owned by this account"
	tokenBalances: [TokenBalance!]! @derivedFrom(field: "account")
	"Token transfers from this account"
	tokenTransferFromEvent: [TokenTransfer!]! @derivedFrom(field: "from")
	"Token transfers to this account"
	tokenTransferToEvent: [TokenTransfer!]! @derivedFrom(field: "to")
	"The timestamp when the Account was created"
	createdAt: BigInt!
	"The timestamp when the Account was last updated"
	updatedAt: BigInt!
}

"""
Represents an Ethereum block
"""
type Block @entity(immutable: true) {
	"The block hash"
	id: Bytes!
	"The block number"
	number: BigInt!
	"The block timestamp"
	timestamp: BigInt!
	"Transactions in this block"
	transactions: [Transaction!]! @derivedFrom(field: "block")
}

"""
Represents the StarterKitERC20Factory contract
"""
type Factory @entity {
	"The address of the factory contract"
	id: Bytes!
	"List of tokens created by this factory"
	createdTokens: [Token!]! @derivedFrom(field: "factory")
	"The Registry associated with this factory"
	registry: Registry!
	"The timestamp when the Factory was created"
	createdAt: BigInt!
	"The timestamp when the Factory was last updated"
	updatedAt: BigInt!
}

"""
Represents the StarterKitERC20Registry contract
"""
type Registry @entity {
	"The address of the registry contract"
	id: Bytes!
	"List of tokens registered in this registry"
	tokens: [Token!]! @derivedFrom(field: "registry")
	"The timestamp when the Registry was created"
	createdAt: BigInt!
	"The timestamp when the Registry was last updated"
	updatedAt: BigInt!
}

"""
Represents a token in the system
"""
type Token @entity {
	"The Ethereum address of the token contract"
	id: Bytes!
	"The name of the token"
	name: String!
	"The symbol of the token"
	symbol: String!
	"The number of decimal places for token amounts"
	decimals: Int!
	"The total supply of the token"
	totalSupply: BigInt!
	"Number of unique token holders"
	tokenHolders: BigInt!
	"The factory that created this token"
	factory: Factory!
	"The registry this token is registered in"
	registry: Registry!
	"Additional data associated with the token"
	extraData: String!
	"The total value of tokens in decimal format"
	value: BigDecimal!
	"The total value of tokens as an exact BigInt"
	valueExact: BigInt!
	"Token approvals for this token"
	approvals: [TokenApproval!]! @derivedFrom(field: "token")
	"Token balances for this token"
	balances: [TokenBalance!]! @derivedFrom(field: "token")
	"Token transfers for this token"
	transfers: [TokenTransfer!]! @derivedFrom(field: "token")
	"The timestamp when the Token was created"
	createdAt: BigInt!
	"The timestamp when the Token was last updated"
	updatedAt: BigInt!
}

"""
Represents an approval for a token
"""
type TokenApproval @entity {
	"Unique identifier for the TokenApproval"
	id: ID!
	"The Token this approval is for"
	token: Token!
	"The Account that owns the tokens"
	owner: Account!
	"The Account approved to spend the tokens"
	spender: Account!
	"The approved value in decimal format"
	value: BigDecimal!
	"The approved value as an exact BigInt"
	valueExact: BigInt!
	"The timestamp when the TokenApproval was created"
	createdAt: BigInt!
	"The timestamp when the TokenApproval was last updated"
	updatedAt: BigInt!
}

"""
Represents the balance of a token for an account
"""
type TokenBalance @entity {
	"Unique identifier for the TokenBalance"
	id: ID!
	"The Account that owns this balance"
	account: Account!
	"The Token this balance is for"
	token: Token!
	"Token transfers from this balance"
	transferFromEvent: [TokenTransfer!]! @derivedFrom(field: "fromBalance")
	"Token transfers to this balance"
	transferToEvent: [TokenTransfer!]! @derivedFrom(field: "toBalance")
	"The balance value in decimal format"
	value: BigDecimal!
	"The balance value as an exact BigInt"
	valueExact: BigInt!
	"The timestamp when the TokenBalance was created"
	createdAt: BigInt!
	"The timestamp when the TokenBalance was last updated"
	updatedAt: BigInt!
}

"""
Represents a token transfer event
"""
type TokenTransfer @entity(immutable: true) {
	"Unique identifier for the TokenTransfer"
	id: ID!
	"The Account that emitted this transfer event"
	emitter: Account!
	"The Token involved in this transfer"
	token: Token!
	"The Account tokens were transferred from"
	from: Account!
	"The TokenBalance of the 'from' account before the transfer"
	fromBalance: TokenBalance!
	"The timestamp of the transfer"
	timestamp: BigInt!
	"The Account tokens were transferred to"
	to: Account!
	"The TokenBalance of the 'to' account after the transfer"
	toBalance: TokenBalance!
	"The Transaction in which this transfer occurred"
	transaction: Transaction!
	"The transferred value in decimal format"
	value: BigDecimal!
	"The transferred value as an exact BigInt"
	valueExact: BigInt!
}

"""
Represents the volume of a token over time
"""
type TokenVolume @entity(timeseries: true) {
	"Unique identifier for the TokenVolume"
	id: Int8!
	"The timestamp of the volume measurement"
	timestamp: Timestamp!
	"The Token this volume is for"
	token: Token!
	"The number of transfers in this time period"
	transferCount: Int!
	"The volume of the token transferred"
	volume: BigInt!
}

"""
Represents aggregated statistics for token volume
"""
type TokenVolumeStats @aggregation(intervals: ["hour", "day"], source: "TokenVolume") {
	"Unique identifier for the TokenVolumeStats"
	id: Int8!
	"The timestamp of the aggregation"
	timestamp: Timestamp!
	"The total number of transfers in the aggregation period"
	totalTransfers: Int! @aggregate(fn: "sum", arg: "transferCount")
	"The total volume for the aggregation period"
	totalVolume: BigInt! @aggregate(fn: "sum", arg: "volume")
}

"""
Represents an Ethereum transaction
"""
type Transaction @entity(immutable: true) {
	"The hash of the transaction"
	id: Bytes!
	"The block in which this transaction was included"
	block: Block!
	"The block number in which the transaction was included"
	blockNumber: BigInt!
	"Events emitted in this transaction"
	events: [Event!]! @derivedFrom(field: "transaction")
	"The timestamp of the transaction"
	timestamp: BigInt!
}

"""
Represents an event emitted by a smart contract
"""
type Event @entity(immutable: true) {
	"Unique identifier for the Event"
	id: ID!
	"The Account that emitted this event"
	emitter: Account!
	"The Transaction in which this event was emitted"
	transaction: Transaction!
	"The timestamp of the event"
	timestamp: BigInt!
}